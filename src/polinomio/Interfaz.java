/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package polinomio;

/**
 *
 * @author manuel
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioPolinomio = new javax.swing.ButtonGroup();
        contenedor = new javax.swing.JPanel();
        polinomios = new javax.swing.JPanel();
        labelCoeficiente = new javax.swing.JLabel();
        coeficiente = new javax.swing.JTextField();
        labelExponente = new javax.swing.JLabel();
        exponente = new javax.swing.JTextField();
        px = new javax.swing.JRadioButton();
        qx = new javax.swing.JRadioButton();
        insertarTermino = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaPolinomios = new javax.swing.JTextArea();
        verPolinomios = new javax.swing.JButton();
        borrarTodo = new javax.swing.JButton();
        operaciones = new javax.swing.JPanel();
        suma = new javax.swing.JButton();
        resta = new javax.swing.JButton();
        multiplicacion = new javax.swing.JButton();
        division = new javax.swing.JButton();
        evaluacion = new javax.swing.JButton();
        derivacion = new javax.swing.JButton();
        labelN = new javax.swing.JLabel();
        nField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaResultado = new javax.swing.JTextArea();
        labelResultado = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TAD POLINOMIO P(x)");
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        contenedor.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1), "Simulación de Operaciones Básicas con Polinomios ", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Ubuntu", 1, 16))); // NOI18N
        contenedor.setName("contenedor"); // NOI18N

        polinomios.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Construcción de Polinomios P(x) y Q(x)", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Ubuntu", 1, 14))); // NOI18N
        polinomios.setName("polinomios"); // NOI18N

        labelCoeficiente.setText("Coeficiente:");

        labelExponente.setText("Exponente:");

        radioPolinomio.add(px);
        px.setSelected(true);
        px.setText("P(x)");
        px.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pxActionPerformed(evt);
            }
        });

        radioPolinomio.add(qx);
        qx.setText("Q(x)");

        insertarTermino.setText("Insertar Termino");
        insertarTermino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertarTerminoActionPerformed(evt);
            }
        });

        areaPolinomios.setColumns(20);
        areaPolinomios.setRows(5);
        jScrollPane1.setViewportView(areaPolinomios);

        verPolinomios.setText("Ver Polinomios");
        verPolinomios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verPolinomiosActionPerformed(evt);
            }
        });

        borrarTodo.setText("Vaciar Polinomios");
        borrarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarTodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout polinomiosLayout = new javax.swing.GroupLayout(polinomios);
        polinomios.setLayout(polinomiosLayout);
        polinomiosLayout.setHorizontalGroup(
            polinomiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(polinomiosLayout.createSequentialGroup()
                .addGroup(polinomiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(polinomiosLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(polinomiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelCoeficiente)
                            .addGroup(polinomiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(px)
                                .addComponent(labelExponente)))
                        .addGap(18, 18, 18)
                        .addGroup(polinomiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(coeficiente, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                            .addComponent(exponente)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, polinomiosLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(qx)
                        .addGap(33, 33, 33)))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(polinomiosLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(insertarTermino)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(verPolinomios)
                .addGap(73, 73, 73)
                .addComponent(borrarTodo)
                .addGap(82, 82, 82))
        );
        polinomiosLayout.setVerticalGroup(
            polinomiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(polinomiosLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(polinomiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(polinomiosLayout.createSequentialGroup()
                        .addGroup(polinomiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCoeficiente)
                            .addComponent(coeficiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(polinomiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelExponente)
                            .addComponent(exponente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(polinomiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(px)
                            .addComponent(qx)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(polinomiosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertarTermino)
                    .addComponent(verPolinomios)
                    .addComponent(borrarTodo))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        operaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Ubuntu", 1, 14))); // NOI18N
        operaciones.setName("operaciones"); // NOI18N

        suma.setText("Suma: P(x) +Q(x)");
        suma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumaActionPerformed(evt);
            }
        });

        resta.setText("Resta: P(x) - Q(x)");
        resta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restaActionPerformed(evt);
            }
        });

        multiplicacion.setText("Multiplicación: P(x) * Q(x)");
        multiplicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplicacionActionPerformed(evt);
            }
        });

        division.setText("División: P(x) / Q(x)");
        division.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divisionActionPerformed(evt);
            }
        });

        evaluacion.setText("Evaluar P(x) en n");
        evaluacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evaluacionActionPerformed(evt);
            }
        });

        derivacion.setText("Derivar P(x)");
        derivacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                derivacionActionPerformed(evt);
            }
        });

        labelN.setText("Ingrese n:");

        areaResultado.setColumns(20);
        areaResultado.setRows(5);
        jScrollPane2.setViewportView(areaResultado);

        labelResultado.setText("Resultado:");

        javax.swing.GroupLayout operacionesLayout = new javax.swing.GroupLayout(operaciones);
        operaciones.setLayout(operacionesLayout);
        operacionesLayout.setHorizontalGroup(
            operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operacionesLayout.createSequentialGroup()
                .addGroup(operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(operacionesLayout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(suma)
                            .addComponent(division)))
                    .addGroup(operacionesLayout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addGroup(operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelN)
                            .addComponent(nField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(operacionesLayout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addGroup(operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resta)
                            .addComponent(evaluacion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addGroup(operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(multiplicacion)
                            .addComponent(derivacion))
                        .addGap(82, 82, 82))
                    .addGroup(operacionesLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(operacionesLayout.createSequentialGroup()
                                .addComponent(labelResultado)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2))
                        .addContainerGap())))
        );
        operacionesLayout.setVerticalGroup(
            operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operacionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(suma)
                    .addComponent(resta)
                    .addComponent(multiplicacion))
                .addGap(24, 24, 24)
                .addGroup(operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(division)
                    .addComponent(evaluacion)
                    .addComponent(derivacion))
                .addGroup(operacionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(operacionesLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(labelN)
                        .addGap(18, 18, 18)
                        .addComponent(nField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, operacionesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(labelResultado)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout contenedorLayout = new javax.swing.GroupLayout(contenedor);
        contenedor.setLayout(contenedorLayout);
        contenedorLayout.setHorizontalGroup(
            contenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contenedorLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(contenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(operaciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(polinomios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        contenedorLayout.setVerticalGroup(
            contenedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contenedorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(polinomios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(operaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(contenedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pxActionPerformed

    private void verPolinomiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verPolinomiosActionPerformed
        
        // La cadena polinomios contendra una cadena que contiene ambos polinomios
        
        String polinomios = "P(x) = "; // Polinomio P(x)
        polinomios += p.mostrarPolinomio() + "\n";
        polinomios += "Q(x) = "; // Polinomio Q(x)
        polinomios += q.mostrarPolinomio() + "\n";
        
        areaPolinomios.setText(polinomios); // Mostramos los polinomios en la caja de texto
        
    }//GEN-LAST:event_verPolinomiosActionPerformed

    private void sumaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumaActionPerformed
        // TODO add your handling code here:
        
        // Si existe el polinomio p y el polinomio q
        if((p.getPrimero()!= null) && (q.getPrimero() != null)) {
            
            Polinomio sum = Polinomio.suma(p, q);
         
            areaResultado.setText("P(x) + Q(x) = " + sum.mostrarPolinomio()); // Mostramos el polinomio
        } 
        
    }//GEN-LAST:event_sumaActionPerformed

    private void insertarTerminoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertarTerminoActionPerformed
        
        if(!coeficiente.getText().equals("") && !exponente.getText().equals("")) { // Si tienen datos los camposs
            
            int c = Integer.parseInt(coeficiente.getText()); // Convertimos el texto del JTextField a entero
            int e = Integer.parseInt(exponente.getText()); // Convertimos el texto del JTextField a entero
           
            if(px.isSelected()) { // Si P(x) esta seleccionada
                
                p.insertarTermino(new Termino(c, e));
            
            } else { // Si Q(x) esta seleccionada
                q.insertarTermino(new Termino(c, e));
            }
        }
    }//GEN-LAST:event_insertarTerminoActionPerformed

    private void restaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restaActionPerformed
        // TODO add your handling code here:
        
        // Si existe el polinomio p y el polinomio q
        if((p.getPrimero() != null) && (q.getPrimero() != null)) {
            
            Polinomio res = Polinomio.resta(p, q);
        
            areaResultado.setText("P(x) - Q(x) = " + res.mostrarPolinomio()); // Mostramos el polinomio
        }
    }//GEN-LAST:event_restaActionPerformed

    private void evaluacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evaluacionActionPerformed
        // TODO add your handling code here:
        
        // Si el campo de texto tiene algun valor y existe el polinomio p
        if((!nField.getText().equals("")) && p.getPrimero() != null) {
            int n = Integer.parseInt(nField.getText()); // Obtenemos el entero de la caja de texto
            
            areaResultado.setText("P(" + nField.getText() + ") = " + Integer.toString(p.evalua(n))); // Mostramos el resultado
        }
    }//GEN-LAST:event_evaluacionActionPerformed

    private void derivacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_derivacionActionPerformed
        // TODO add your handling code here:
        
        if(p.getPrimero() != null) { // Si existe el polinomio p
            Polinomio der;
            
            der = Polinomio.derivar(p);
            
            areaResultado.setText("P'(x) = " + der.mostrarPolinomio()); // Mostramos el resultado
        }
    }//GEN-LAST:event_derivacionActionPerformed

    private void multiplicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplicacionActionPerformed
        // TODO add your handling code here:
        
        // Si existe el polinomio p y el polinomio q
        if(p.getPrimero() != null && q.getPrimero()!= null) {
            
            Polinomio mul;
            
            mul = Polinomio.multiplicacion(p, q);
            
            areaResultado.setText("P(x) * Q(x) = " + mul.mostrarPolinomio());
        }
    }//GEN-LAST:event_multiplicacionActionPerformed

    private void divisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divisionActionPerformed
        // TODO add your handling code here:
        
        // Si existe el polinomio p y el polinomio q
        if(p.getPrimero() != null && q.getPrimero() != null) {
            // Si el grado del polinomio p es mayor igual que el grado del polinomio q
            if(p.getPrimero().getDato().getExponente() >= q.getPrimero().getDato().getExponente()) {
                Polinomio div;
                
                div = Polinomio.division(p, q);
                
                areaResultado.setText("P(x) / Q(x) = " + div.mostrarPolinomio());
            } else {
                
                String error = "No se puede realizar la operación: "
                        + "\nEl grado del polinomio P debe ser mayor que el polinomio Q.";
                areaResultado.setText(error);
            }
        }
    }//GEN-LAST:event_divisionActionPerformed

    private void borrarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarTodoActionPerformed
        // TODO add your handling code here:
        
        // Reiniciamos los polinomios p y q
        p = new Polinomio();
        q = new Polinomio();
        
        
        // Vaciamos las cajas de texto
        coeficiente.setText("");
        exponente.setText("");
        nField.setText("");
        
        areaPolinomios.setText("");
        areaResultado.setText("");
        
        // Dejamos seleccionado por defecto P(x)
        px.setSelected(true);
    }//GEN-LAST:event_borrarTodoActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaPolinomios;
    private javax.swing.JTextArea areaResultado;
    private javax.swing.JButton borrarTodo;
    private javax.swing.JTextField coeficiente;
    private javax.swing.JPanel contenedor;
    private javax.swing.JButton derivacion;
    private javax.swing.JButton division;
    private javax.swing.JButton evaluacion;
    private javax.swing.JTextField exponente;
    private javax.swing.JButton insertarTermino;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelCoeficiente;
    private javax.swing.JLabel labelExponente;
    private javax.swing.JLabel labelN;
    private javax.swing.JLabel labelResultado;
    private javax.swing.JButton multiplicacion;
    private javax.swing.JTextField nField;
    private javax.swing.JPanel operaciones;
    private javax.swing.JPanel polinomios;
    private javax.swing.JRadioButton px;
    private javax.swing.JRadioButton qx;
    private javax.swing.ButtonGroup radioPolinomio;
    private javax.swing.JButton resta;
    private javax.swing.JButton suma;
    private javax.swing.JButton verPolinomios;
    // End of variables declaration//GEN-END:variables

    Polinomio p = new Polinomio(); // Polinomio P(x)
    Polinomio q = new Polinomio(); // Polinomio Q(x)
}
